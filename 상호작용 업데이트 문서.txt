[2019.07.31 오후 5시]
상호 작용을 업데이트했습니다!

- 상호작용은 Interaction 스크립트에 구현되어 있으며, 이를 플레이어블 캐릭터에 붙여주시면 됩니다. 상호작용 키 E를 누르면 캐릭터와 충돌되어 있으면서 가장 가까운 물체와 상호작용하게 됩니다.

(상호작용 거리를 키우시려면 아이템의 Collider2D(isTrigger)의 범위를 조절하시면 됩니다)


- 모든 상호작용 가능한 물체는 인터페이스 IInteractable를 상속받으며, 사용법은 오직 public void Interact() 함수의 구현만 만들면 됩니다.


- 예를 들어, 사람과 대화한다는 상호작용이라면, 상호작용의 대상이 되는 'NPC'에게 대화 스크립트를 붙여주고, Interact()로 "대화한다"는 액션을 작성해주시면 됩니다.


- 주의하실 점은 Collider2D에 해당하는 컴포넌트가 붙어 있고 태그가 "Interactable"인 물체와만 상호작용이 가능하니 이 점 유의해서 사용해주세요.


- 이동에 관해서는 정말 대충 스크립트를 작성했으므로 CharacterMove 스크립트는 다시 작성해야 할 것 같습니다.


- 그리고 가까운 물체에 테두리가 하얗게 되면서, 팝업하는 것은 아직 구현하지 못했으며, 아직 애니메이션 기능은 넣지 않았습니다.


- 임시로 Resources/Sprite에 2D 스프라이트를 저장했습니다. 필요하다면 자유롭게 옮겨주세요.


- 아이템 이미지(아이콘, 아이템 인벤토리에 표시됨)는 Resources/ItemImages 폴더 내에 저장하시면 됩니다. 다만 스프라이트 이름과, 획득가능한 오브젝트에 부착하는 ItemGainable의 ItemName을 똑같게 해주세요!




=============클래스 설명===============

CharacterMove : 
캐릭터의 움직임에 관한 클래스, 매우 조잡하니 재작성 요함.

Door : 
문을 열고 닫을 수 있게 해주는 스크립트. bool isOpenByKey을 통해 열쇠로 열고 닫을지, Switch로 열고 닫을지를 결정할 수 있습니다.

IInteractable : 
모든 상호작용 가능한 오브젝트가 상속해야 하는 인터페이스, 자식 클래스는 반드시 Interact 함수를 작성해야 한다.

Interaction : 
캐릭터가 다른 물체와 상호작용할 수 있게 하는 스크립트. 캐릭터에 붙여주면 된다.

Item : 
아이템 클래스. 인벤토리에 들어가는 아이템에 관한 정보를 담는 객체.

ItemDatabase : 
인벤토리(아이템 리스트) 기능을 갖고 있으며, Add 함수를 통해 아이템을 추가할 수 있다. 싱글톤 패턴으로 작성되어, ItemDatabase.GetInstance()로 ItemDatabase 클래스의 객체에 접근할 수 있다.
[임시]Database의 인스펙터에서 Items에서 임시로 아이템 리스트에 무엇이 저장되었는지 확인할 수 있다.
(객체명 : Database)

ItemGainable : 획득가능한 오브젝트에 부착하여, 상호작용 시 아이템을 획득할 수 있게 한다. 다만 Inspector에서 아이템에 관한 정보를 써주어야 하며, 이미지는 Resources/ItemImages 폴더에 '이름'이 똑같은 스프라이트를 넣어주면 된다.
(Inspector의 ItemName과 위 폴더의 스프라이트와 이름이 같으면 된다!)

ItemSwitch : 스위치 방식을 구현하는 클래스.

ItemTools : 획득가능한 도구 오브젝트에 부착할 클래스. 아직 도구 인벤토리를 따로 만들지 않아 제대로 된 기능이 없음.


